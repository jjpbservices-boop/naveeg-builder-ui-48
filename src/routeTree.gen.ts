/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspaceRouteImport } from './routes/workspace'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SiteIdOverviewRouteImport } from './routes/$siteId/overview'
import { Route as SiteIdDomainsRouteImport } from './routes/$siteId/domains'
import { Route as SiteIdAnalyticsRouteImport } from './routes/$siteId/analytics'
import { Route as SiteIdLayoutRouteImport } from './routes/$siteId/_layout'

const SiteIdRouteImport = createFileRoute('/$siteId')()

const SiteIdRoute = SiteIdRouteImport.update({
  id: '/$siteId',
  path: '/$siteId',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceRoute = WorkspaceRouteImport.update({
  id: '/workspace',
  path: '/workspace',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SiteIdOverviewRoute = SiteIdOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => SiteIdRoute,
} as any)
const SiteIdDomainsRoute = SiteIdDomainsRouteImport.update({
  id: '/domains',
  path: '/domains',
  getParentRoute: () => SiteIdRoute,
} as any)
const SiteIdAnalyticsRoute = SiteIdAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => SiteIdRoute,
} as any)
const SiteIdLayoutRoute = SiteIdLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => SiteIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceRoute
  '/$siteId': typeof SiteIdLayoutRoute
  '/$siteId/analytics': typeof SiteIdAnalyticsRoute
  '/$siteId/domains': typeof SiteIdDomainsRoute
  '/$siteId/overview': typeof SiteIdOverviewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceRoute
  '/$siteId': typeof SiteIdLayoutRoute
  '/$siteId/analytics': typeof SiteIdAnalyticsRoute
  '/$siteId/domains': typeof SiteIdDomainsRoute
  '/$siteId/overview': typeof SiteIdOverviewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceRoute
  '/$siteId': typeof SiteIdRouteWithChildren
  '/$siteId/_layout': typeof SiteIdLayoutRoute
  '/$siteId/analytics': typeof SiteIdAnalyticsRoute
  '/$siteId/domains': typeof SiteIdDomainsRoute
  '/$siteId/overview': typeof SiteIdOverviewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspace'
    | '/$siteId'
    | '/$siteId/analytics'
    | '/$siteId/domains'
    | '/$siteId/overview'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspace'
    | '/$siteId'
    | '/$siteId/analytics'
    | '/$siteId/domains'
    | '/$siteId/overview'
  id:
    | '__root__'
    | '/'
    | '/workspace'
    | '/$siteId'
    | '/$siteId/_layout'
    | '/$siteId/analytics'
    | '/$siteId/domains'
    | '/$siteId/overview'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspaceRoute: typeof WorkspaceRoute
  SiteIdRoute: typeof SiteIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$siteId': {
      id: '/$siteId'
      path: '/$siteId'
      fullPath: '/$siteId'
      preLoaderRoute: typeof SiteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace': {
      id: '/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$siteId/overview': {
      id: '/$siteId/overview'
      path: '/overview'
      fullPath: '/$siteId/overview'
      preLoaderRoute: typeof SiteIdOverviewRouteImport
      parentRoute: typeof SiteIdRoute
    }
    '/$siteId/domains': {
      id: '/$siteId/domains'
      path: '/domains'
      fullPath: '/$siteId/domains'
      preLoaderRoute: typeof SiteIdDomainsRouteImport
      parentRoute: typeof SiteIdRoute
    }
    '/$siteId/analytics': {
      id: '/$siteId/analytics'
      path: '/analytics'
      fullPath: '/$siteId/analytics'
      preLoaderRoute: typeof SiteIdAnalyticsRouteImport
      parentRoute: typeof SiteIdRoute
    }
    '/$siteId/_layout': {
      id: '/$siteId/_layout'
      path: '/$siteId'
      fullPath: '/$siteId'
      preLoaderRoute: typeof SiteIdLayoutRouteImport
      parentRoute: typeof SiteIdRoute
    }
  }
}

interface SiteIdRouteChildren {
  SiteIdLayoutRoute: typeof SiteIdLayoutRoute
  SiteIdAnalyticsRoute: typeof SiteIdAnalyticsRoute
  SiteIdDomainsRoute: typeof SiteIdDomainsRoute
  SiteIdOverviewRoute: typeof SiteIdOverviewRoute
}

const SiteIdRouteChildren: SiteIdRouteChildren = {
  SiteIdLayoutRoute: SiteIdLayoutRoute,
  SiteIdAnalyticsRoute: SiteIdAnalyticsRoute,
  SiteIdDomainsRoute: SiteIdDomainsRoute,
  SiteIdOverviewRoute: SiteIdOverviewRoute,
}

const SiteIdRouteWithChildren =
  SiteIdRoute._addFileChildren(SiteIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspaceRoute: WorkspaceRoute,
  SiteIdRoute: SiteIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
